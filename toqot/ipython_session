
'''TODO:
 * LoopVelocity could be done with outlines mask above the pie.
 * for myLoopInsert possible layout is -o- insted of o-o
 * make widgets for all states
 * make optional start position at 6 o'clock instead of 12'''

#-*-----------------------------------------------------------------------
##
## read and print events from gamepad
##

from PyQt4.QtCore import *
from swig import readjoy
from PyQt4.QtGui import *
import sys

class Bridge(QObject):
    def __init__(self, parent = None):
        super(Bridge, self).__init__(parent)
    def emitMessage(self, message):
        self.emit(SIGNAL("gamepad"), message)
        

class Gamepad(QThread):
    def __init__(self, parent=None):
        QThread.__init__(self, parent)
        self.bridge = Bridge()
        self.gamepad = readjoy.Joystick('/dev/input/js0')
        
    def run(self):
        self.readGamepad()
        self.exec_()
     
    def readGamepad(self):
        while True:
            a = self.gamepad.getEvent()
            self.bridge.emitMessage('%s%s : %s' % (str(a[0]), str(a[1]), str(a[2])))
            

gamepad = Gamepad()
def pisi(message):
    print message
    

QObject.connect(gamepad.bridge, SIGNAL('gamepad'), pisi)
gamepad.start()
#- - - - -
##
## from 0-1 to any range (max, min)
##

int(round(((round(i,2)**3)*100)*((max-min)/100.)+min))

#- - - -
##
## send midi with pyalsa
##

from pyalsa import alsaseq

seq = alsaseq.Sequencer()
seq.create_simple_port("myPort", alsaseq.SEQ_PORT_TYPE_APPLICATION, alsaseq.SEQ_PORT_CAP_SUBS_READ | alsaseq.SEQ_PORT_CAP_READ | alsaseq.SEQ_PORT_CAP_WRITE | alsaseq.SEQ_PORT_CAP_SUBS_WRITE)

event = alsaseq.SeqEvent(alsaseq.SEQ_EVENT_NOTEON)
event.set_data({'note.note' : 0x40, 'note.velocity' : 64})

seq.output_event(event)
seq.drain_output()

#- - - - -
from pyalsa import alsaseq

seq = alsaseq.Sequencer()
seq.create_simple_port("myPort", alsaseq.SEQ_PORT_TYPE_APPLICATION, alsaseq.SEQ_PORT_CAP_SUBS_READ | alsaseq.SEQ_PORT_CAP_READ)
event = alsaseq.SeqEvent(alsaseq.SEQ_EVENT_PGMCHANGE)
event.set_data({'control.value' : 127})
seq.output_event(event)
seq.drain_output()
event2 = alsaseq.SeqEvent(alsaseq.SEQ_EVENT_CONTROLLER)
event2.set_data({'control.value' : 127, 'control.param' : 0x20})
seq.output_event(event2)

#- - - - - -
##
## read midi with pyalsa
##

from pyalsa import alsaseq

seq = alsaseq.Sequencer()
seq.create_simple_port("myPort", alsaseq.SEQ_PORT_TYPE_APPLICATION, alsaseq.SEQ_PORT_CAP_SUBS_WRITE | alsaseq.SEQ_PORT_CAP_WRITE)
while True:
    events = seq.receive_events(1000)
    for event in events:
      print event

event.is_control_type # True
event.get_data()['note.velocity']
event.get_data()['note.note']

#- - - - -
##
## osc send
##

import liblo

target = liblo.Address(9951)
liblo.send(target, '/sl/0/hit', 'record')
liblo.send(target, '/sl/0/hit', 'record')
msg = liblo.Message('/sl/0/hit')
msg.add('record')
liblo.send(target, msg)
liblo.send(target, msg)

#- - - - -
##
## convert decibel to linear slider
##

def gain2position(gain):
  print ((6.0 * math.log(gain)/math.log(2.)+198)/198.)**8

def position2gain(pos):
  print 2.** ((math.sqrt(math.sqrt(math.sqrt(pos)))*198.-198)/6.)

#- - - - -
##
## continous controller
##

uf... treba mi factory pattern...

listContContr = []
tajmer = QTimer()
listContContr.append(tajmer)
listContContr[0] = ['control', 'param', 'value']

class ContinousController(QObject):
  def __init__(self, parent = None):
    super(ContinousController, self).__init__(parent)
    self.control = control
    self.param = 
    
 
